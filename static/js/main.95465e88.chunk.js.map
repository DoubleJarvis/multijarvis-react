{"version":3,"sources":["components/RemoveButton.js","components/Stream.js","components/AddStreamForm.js","components/Streams.js","App.js","serviceWorker.js","index.js"],"names":["RemoveButton","_this","this","id","props","react_default","a","createElement","className","onClick","onRemoveClick","channel","Component","Stream","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onMouseEnter","bind","assertThisInitialized","onMouseLeave","state","player","options","width","window","Twitch","Player","setVolume","settings","volume","setQuality","lowQuality","setMuted","disableCaptions","setState","components_RemoveButton","action","event","highQuality","getFullscreen","AddStreamForm","value","handleChange","handleSubmit","target","preventDefault","onStreamAdded","Fragment","onSubmit","type","onChange","placeholder","Streams","channels","updateSearchString","location","search","match","_wrapRegExp","groups","split","map","filter","item","concat","length","join","console","log","history","pushState","_this2","components_Stream","key","components_AddStreamForm","App","components_Streams","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAgBeA,mLAbJ,IAAAC,EAAAC,KACCC,EAAOD,KAAKE,MAAZD,GACR,OACEE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBL,GAAIA,EAAIM,QAAS,kBAAMR,EAAKS,cAAcP,KAA7E,gDAKUQ,GACZT,KAAKE,MAAMM,cAAcC,UAVFC,aC2CZC,cAzCb,SAAAA,EAAYT,GAAO,IAAAH,EAAA,OAAAa,OAAAC,EAAA,EAAAD,CAAAZ,KAAAW,IACjBZ,EAAAa,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAhB,KAAME,KACDe,aAAelB,EAAKkB,aAAaC,KAAlBN,OAAAO,EAAA,EAAAP,CAAAb,IACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlBN,OAAAO,EAAA,EAAAP,CAAAb,IACpBA,EAAKsB,MAAQ,CACXC,OAAQ,MALOvB,mFASjB,IAAIwB,EAAU,CACZC,MAAO,OACPf,QAAST,KAAKE,MAAMO,SAElBa,EAAS,IAAIG,OAAOC,OAAOC,OAAO3B,KAAKE,MAAMO,QAASc,GAC1DD,EAAOM,UAAU5B,KAAKE,MAAM2B,SAASC,QACrCR,EAAOS,WAAW/B,KAAKE,MAAM2B,SAASG,YACtCV,EAAOW,UAAS,GAChBX,EAAOY,kBAEPlC,KAAKmC,SAAS,CAAEb,OAAQA,qCAEjB,IACCb,EAAYT,KAAKE,MAAjBO,QACR,OACEN,EAAAC,EAAAC,cAAA,OAAKY,aAAejB,KAAKiB,aAAeG,aAAepB,KAAKoB,aAAed,UAAU,SAASL,GAAKQ,GACjGN,EAAAC,EAAAC,cAAC+B,EAAD,CAAcnC,GAAIQ,EAAS4B,OAAO,SAAS7B,cAAeR,KAAKE,MAAMM,sDAI9D8B,GACXtC,KAAKqB,MAAMC,OAAOW,UAAS,GAC3BjC,KAAKqB,MAAMC,OAAOS,WAAW/B,KAAKE,MAAM2B,SAASU,kDAEtCD,GACNtC,KAAKqB,MAAMC,OAAOkB,kBACrBxC,KAAKqB,MAAMC,OAAOW,UAAS,GAC3BjC,KAAKqB,MAAMC,OAAOS,WAAW/B,KAAKE,MAAM2B,SAASG,oBArClCtB,aC4BN+B,cA5Bb,SAAAA,EAAYvC,GAAO,IAAAH,EAAA,OAAAa,OAAAC,EAAA,EAAAD,CAAAZ,KAAAyC,IACjB1C,EAAAa,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAA6B,GAAAzB,KAAAhB,KAAME,KACDmB,MAAQ,CACXqB,MAAO,IAET3C,EAAK4C,aAAe5C,EAAK4C,aAAazB,KAAlBN,OAAAO,EAAA,EAAAP,CAAAb,IACpBA,EAAK6C,aAAe7C,EAAK6C,aAAa1B,KAAlBN,OAAAO,EAAA,EAAAP,CAAAb,IANHA,4EAQNuC,GACXtC,KAAKmC,SAAS,CAACO,MAAOJ,EAAMO,OAAOH,6CAExBJ,GACXA,EAAMQ,iBACN9C,KAAKE,MAAM6C,cAAc/C,KAAKqB,MAAMqB,OACpC1C,KAAKmC,SAAS,CAAEO,MAAO,sCAGvB,OACEvC,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,SAAP,KACE7C,EAAAC,EAAAC,cAAA,QAAM4C,SAAUjD,KAAK4C,cACnBzC,EAAAC,EAAAC,cAAA,SAAO6C,KAAK,OAAOR,MAAO1C,KAAKqB,MAAMqB,MAAOS,SAAUnD,KAAK2C,aAAcS,YAAY,sBACrFjD,EAAAC,EAAAC,cAAA,SAAO6C,KAAK,SAASR,MAAM,iBAtBThC,m1BCgEb2C,cA7Db,SAAAA,EAAYnD,GAAO,IAAAH,EAAA,OAAAa,OAAAC,EAAA,EAAAD,CAAAZ,KAAAqD,IACjBtD,EAAAa,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAyC,GAAArC,KAAAhB,KAAME,KACDmB,MAAQ,CACXiC,SAAU,GACVzB,SAAU,CACRC,OAAQ,MACRE,WAAY,SACZO,YAAa,YAGjBxC,EAAKS,cAAgBT,EAAKS,cAAcU,KAAnBN,OAAAO,EAAA,EAAAP,CAAAb,IACrBA,EAAKwD,mBAAqBxD,EAAKwD,mBAAmBrC,KAAxBN,OAAAO,EAAA,EAAAP,CAAAb,IAC1BA,EAAKgD,cAAgBhD,EAAKgD,cAAc7B,KAAnBN,OAAAO,EAAA,EAAAP,CAAAb,IAZJA,oFAejB,GAAI0B,OAAO+B,SAASC,OAAQ,CAC1B,IAAMH,EAAW7B,OAAO+B,SAASC,OAAOC,MAAvBC,EAA6B,kBAA7B,CAAAL,SAAA,KAA2DM,OAAON,SAASO,MAAM,KAAKC,IAAI,SAAArD,GAAO,OAAIA,IACtHT,KAAKmC,SAAS,CAAEmB,oDAGN7C,GACZT,KAAKmC,SAAS,SAAAd,GAEZ,MAAO,CACLiC,SAFejC,EAAMiC,SAASS,OAAO,SAACC,GAAD,OAAUA,IAASvD,MAIzDT,KAAKuD,0DAEI9C,GACZT,KAAKmC,SAAS,SAAAd,GAEZ,MAAO,CAAEiC,SADQjC,EAAMiC,SAASW,OAAOxD,KAEtCT,KAAKuD,iEAIR,IAAID,EAAW,GAEbA,EADEtD,KAAKqB,MAAMiC,SAASY,OAAS,EACpB,aAAelE,KAAKqB,MAAMiC,SAASa,KAAK,KAExC,GAEbC,QAAQC,IAAIf,GACZ7B,OAAO6C,QAAQC,UAAU,GAAI,cAAejB,oCAErC,IAAAkB,EAAAxE,KACP,OACEG,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,SAAP,KACE7C,EAAAC,EAAAC,cAAA,OAAKJ,GAAG,WAEJD,KAAKqB,MAAMiC,SAASQ,IAAI,SAACrD,GAAD,OACtBN,EAAAC,EAAAC,cAACoE,EAAD,CAAQC,IAAKjE,EAASA,QAAUA,EAAUoB,SAAW2C,EAAKnD,MAAMQ,SAAWrB,cAAegE,EAAKhE,mBAIrGL,EAAAC,EAAAC,cAACsE,EAAD,CAAe5B,cAAe/C,KAAK+C,wBAxDrBrC,aCSPkE,MARf,WACE,OACEzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwE,EAAD,QCIcC,QACW,cAA7BrD,OAAO+B,SAASuB,UAEe,UAA7BtD,OAAO+B,SAASuB,UAEhBtD,OAAO+B,SAASuB,SAASrB,MACvB,2DCZNsB,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95465e88.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass RemoveButton extends Component {\n  render() {\n    const { id } = this.props\n    return (\n      <button className=\"btn btn-remove\" id={id} onClick={() => this.onRemoveClick(id)}>\n        Remove\n      </button>\n    )\n  }\n  onRemoveClick(channel) {\n    this.props.onRemoveClick(channel)\n  }\n}\n\nexport default RemoveButton;","import React, { Component } from 'react';\nimport RemoveButton from './RemoveButton';\n\nclass Stream extends Component {\n  constructor(props) {\n    super(props);\n    this.onMouseEnter = this.onMouseEnter.bind(this)\n    this.onMouseLeave = this.onMouseLeave.bind(this)\n    this.state = {\n      player: null\n    }\n  }\n  componentDidMount() {\n    var options = {\n      width: \"100%\",\n      channel: this.props.channel,\n    }\n    var player = new window.Twitch.Player(this.props.channel, options)\n    player.setVolume(this.props.settings.volume)\n    player.setQuality(this.props.settings.lowQuality)\n    player.setMuted(true)\n    player.disableCaptions()\n    \n    this.setState({ player: player })\n  }\n  render() {\n    const { channel } = this.props;\n    return (\n      <div onMouseEnter={ this.onMouseEnter } onMouseLeave={ this.onMouseLeave } className=\"stream\" id={ channel }>\n        <RemoveButton id={channel} action=\"Remove\" onRemoveClick={this.props.onRemoveClick} />\n      </div>\n    )\n  }\n  onMouseEnter(event) {\n    this.state.player.setMuted(false)\n    this.state.player.setQuality(this.props.settings.highQuality)\n  }\n  onMouseLeave(event) {\n    if (!this.state.player.getFullscreen()) {\n      this.state.player.setMuted(true)\n      this.state.player.setQuality(this.props.settings.lowQuality)\n    }\n  }\n}\n\nexport default Stream;","import React, { Component } from 'react'\n\nclass AddStreamForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  handleChange(event) {\n    this.setState({value: event.target.value})\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    this.props.onStreamAdded(this.state.value)\n    this.setState({ value: '' })\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Add new stream...\"/>\n          <input type=\"submit\" value=\"Add\" />\n        </form>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default AddStreamForm;","import React, { Component } from 'react';\nimport Stream from './Stream';\nimport AddStreamForm from './AddStreamForm'\n\nclass Streams extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      channels: [],\n      settings: {\n        volume: \"0.5\",\n        lowQuality: \"360p30\",\n        highQuality: \"chunked\"\n      }\n    }\n    this.onRemoveClick = this.onRemoveClick.bind(this)\n    this.updateSearchString = this.updateSearchString.bind(this)\n    this.onStreamAdded = this.onStreamAdded.bind(this)\n  }\n  componentWillMount() {\n    if (window.location.search) {\n      const channels = window.location.search.match(/\\?channels=(?<channels>.+)/).groups.channels.split(',').map(channel => channel)\n      this.setState({ channels })\n    }\n  }\n  onRemoveClick(channel) {\n    this.setState(state => {\n      const channels = state.channels.filter((item) => item !== channel);\n      return {\n        channels\n      };\n    }, this.updateSearchString);\n  }\n  onStreamAdded(channel) {\n    this.setState(state => {\n      const channels = state.channels.concat(channel)\n      return { channels }\n    }, this.updateSearchString)\n  }\n\n  updateSearchString() {\n    var channels = '';\n    if (this.state.channels.length > 0) {\n      channels = \"?channels=\" + this.state.channels.join(',')\n    } else {\n      channels = \"\"\n    }\n    console.log(channels)\n    window.history.pushState({}, \"MultiJarvis\", channels)\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"streams\">\n          {\n            this.state.channels.map((channel) => (\n              <Stream key={channel} channel={ channel } settings={ this.state.settings } onRemoveClick={this.onRemoveClick} />\n            ))\n          }\n        </div>\n        <AddStreamForm onStreamAdded={this.onStreamAdded} />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Streams;","import React from 'react';\nimport './App.css';\n\nimport Streams from './components/Streams'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Streams />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}